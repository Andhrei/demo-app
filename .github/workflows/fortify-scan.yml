name: Fortify Security Scan
on:
  workflow_dispatch:
  push:
    # Master or main branch that you want to trigger this workflow for
    branches: [main]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [main]
  

jobs:                                                  
  Fortify-SAST:
    # Use the appropriate runner for building your source code
    runs-on: ubuntu-latest 
    environment: fortify
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    env:     
      APPLICATION: "${{ github.event.repository.name }} GitHub"
      VERSION: "${{ github.ref_name }}"
      APPLICATION_FROM: "${{ github.event.repository.name }} GitHub"
      VERSION_FROM: "main"
    
      FTFY_SSC_URL: ${{ vars.FTFY_SSC_URL }}
      FTFY_SC_CONTROLLER_URL: ${{ vars.FTFY_SC_CONTROLLER_URL }}
      FTFY_CI_TOKEN_DEC: ${{ secrets.FTFY_CI_TOKEN_DEC }}
      FTFY_CI_TOKEN_ENC: ${{ secrets.FTFY_CI_TOKEN_ENC }}
      FTFY_SC_CLIENT_VERSION: "23.1.0"
      FTFY_SC_CLIENT_AUTH_TOKEN: ${{ secrets.FTFY_SC_CLIENT_AUTH_TOKEN }}
      FTFY_BUILD_OPTS: "-bt mvn"
      # Requires GitHub Advanced Security
      PUBLISH_SECURITY_ALERTS: false
      
      IQ_URL: ${{ vars.IQ_URL }}
      IQ_ORG: "GitHub"
      IQ_USERNAME: ${{ secrets.IQ_USERNAME }}
      IQ_PASSWORD: ${{ secrets.IQ_PASSWORD }}
      IQ_APP: "demoapp_gh"
      IQ_STAGE: "develop"
      IQ_BUILD_OPTS: ""
#      IQ_BUILD_OPTS: "mvn dependency:copy-dependencies"
      IQ_TARGET: "pom.xml"

      SHA: "${{ github.run_id }}"
    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v2
        with:
          # Fetch at least the immediate parents so that if this is a pull request then we can checkout the head.
          fetch-depth: 2
      # If this run was triggered by a pull request event, then checkout the head of the pull request instead of the merge commit.
      - run: git checkout HEAD^2
        if: ${{ github.event_name == 'pull_request' }} 

      ### Set up Fortify ScanCentral Client ###
      - name: Download Fortify ScanCentral Client
        uses: fortify/gha-setup-scancentral-client@v1
        with:
          version: ${{ env.FTFY_SC_CLIENT_VERSION }}   
          client-auth-token: ${{ env.FTFY_SC_CLIENT_AUTH_TOKEN }}
          
      # Retrieve CLIs
      - name: Download CLIs
        run: |
          cd "/opt/hostedtoolcache/Fortify ScanCentral/${FTFY_SC_CLIENT_VERSION}/x64/bin"
          wget -qO- https://github.com/fortify/fcli/releases/download/v1.3.0/fcli-linux.tgz | tar zxf -  
          wget -qO- https://sonatype-download.global.ssl.fastly.net/repository/downloads-prod-group/scanner/nexus-iq-cli-1.167.0-01+683-unix.zip | jar xvf /dev/stdin
          chmod +x nexus-iq-cli

      - name: Download IQ Integration
        run: |
          wget -qO- https://gitlab.ekseed.org/fortify/nexus-iq-integration/-/jobs/9118/artifacts/download | jar xvf /dev/stdin
          chmod +x nexus-iq-integration

      # Login
      - name: Login to Fortify
        run: |
          fcli ssc session login --url $FTFY_SSC_URL -t $FTFY_CI_TOKEN_DEC
          fcli sc-sast session login --ssc-url $FTFY_SSC_URL -t $FTFY_CI_TOKEN_DEC -c $FTFY_SC_CLIENT_AUTH_TOKEN

      # Create AppVersion
      - name: Create Application Version
        run: |
          appVersionSearch=$(fcli ssc appversion ls -q=application.name="$APPLICATION" -q=name="${VERSION}")

          if [[ $appVersionSearch = "No data" ]]; then
            echo "Application Version $APPLICATION:$VERSION not found. Creation init";
          
            echo "Retrieving Application ID"
            projectId=$(fcli ssc app get "${APPLICATION}" -o expr={id})
            echo "ApplicationId = $projectId"
          
            echo "Creating Application Version"
            body="{
                \"name\": \"$VERSION\",
                \"description\": \"\",
                \"active\": true,
                \"committed\": false,
                \"project\": {
                    \"id\": $projectId
                }
            }"
          
            applicationVersionId=$(fcli ssc rest call /api/v1/projectVersions -d "$body" -X POST -o expr={data.id})
            echo "Application Version created with id $applicationVersionId"
          
            echo "Copy Application State from \"$APPLICATION\":$VERSION to \"$APPLICATION_FROM\":$VERSION_FROM "
            echo "Searching for \"$APPLICATION_FROM\":$VERSION_FROM"
          
            appVersionSearch=$(fcli ssc appversion ls -q=application.name="${APPLICATION_FROM}" -q=name="${VERSION_FROM}")
            if [[ $appVersionSearch = "No data" ]]; then
                  echo "Application Version $APPLICATION_FROM:$VERSION_FROM not found. Skipping Copy State";
            else
              echo "Application Version $APPLICATION_FROM:$VERSION_FROM found"
              fromApplicationVersionId=$(fcli ssc appversion get "$APPLICATION_FROM":$VERSION_FROM -o expr={id})
              echo "Application Version $APPLICATION_FROM:$VERSION_FROM id: $fromApplicationVersionId"
          
              echo "Copy State init"
              body="{
                      \"copyAnalysisProcessingRules\": \"true\",
                      \"copyBugTrackerConfiguration\": \"true\",
                      \"copyCustomTags\": \"true\",
                      \"previousProjectVersionId\": \"$fromApplicationVersionId\",
                      \"projectVersionId\": \"$applicationVersionId\"
                    }"
              status=$(fcli ssc rest call /api/v1/projectVersions/action/copyFromPartial -d "$body" -X POST -o expr={responseCode})
          
              if [[ $status = 200 ]] ; then
                echo "Copy State SUCCESS. Commiting Application Version"
                body='{"committed": "true"}'
                status=$(fcli ssc rest call /api/v1/projectVersions/$applicationVersionId -d "$body" -X PUT -o expr={responseCode})
                if [[ $status = 200 ]] ; then
                        echo "Application Version commited."
                else
                  echo $status
                  echo "Something went wrong while commiting Application Version"
                fi
              fi
              if [[ $status != 200 ]]; then
                echo $status
                echo "Copy State FAILURE. Deleting Application"
                status=$(fcli ssc rest call /api/v1/projectVersions/$applicationVersionId -X DELETE -o expr={responseCode})
                if [[ $status = 200 ]] ; then
                  echo "Application Version deleted."
                else
                  echo $status
                  echo "Something went wrong while deleting Application Version"
                fi
                exit 1
              fi
            fi
          else
            echo "Application Version \"$APPLICATION\":$VERSION already exists. Skipping";
          fi

      ## SAST
      # Package sources
      - name: Package SAST Sources
        run: |
          scancentral package $FTFY_BUILD_OPTS -o package.zip
          # mvn dependency:tree -DoutputFile=.debricked-maven-dependencies.tgf -DoutputType=tgf
          # zip -r package.zip .debricked-maven-dependencies.tgf

       # Run SAST Scan
      - name: Run SAST Scan
        run: |
          fcli sc-sast scan start -p package.zip --sensor-version ${FTFY_SC_CLIENT_VERSION} --appversion "${APPLICATION}":"${VERSION}" --store ${SHA}_sastscan

      ## SCA
      - name: Run SCA Scan (Sonatype)
        run: |
          eval "${IQ_BUILD_OPTS}"
          nexus-iq-cli --server-url ${IQ_URL} --authentication "$IQ_USERNAME":"$IQ_PASSWORD"  --application-id "${IQ_APP}" --organization-id ${IQ_ORG} --stage $IQ_STAGE $IQ_TARGET
          ./nexus-iq-integration -iqurl ${IQ_URL}  -iquser $IQ_USERNAME -iqpassword "$IQ_PASSWORD" -iqproject "${IQ_APP}" -iqstage $IQ_STAGE -sscurl $FTFY_SSC_URL -ssctoken ${FTFY_CI_TOKEN_ENC} -sscapp "${APPLICATION}" -sscversion ${VERSION}

      - name: Wait for SAST Scan Completion
        run: fcli sc-sast scan wait-for "{?${SHA}_sastscan:jobToken}" -i 30s
         
      - name: Export Fortify vulnerability data
        if: ${{ env.PUBLISH_SECURITY_ALERTS == 'true' }}
        uses: fortify/gha-export-vulnerabilities@v1.0.0
        with:
          ssc_base_url: ${FTFY_SSC_URL}
          ssc_auth_token: ${FTFY_CI_TOKEN_DEC}
          ssc_version_name: "${APPLICATION}:${VERSION}"

      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        if: ${{ env.PUBLISH_SECURITY_ALERTS == 'true' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ./gh-fortify-sast.sarif

      # Clean up tokens, session variables, ...
      - name: Cleanup
        if: always()
        run: |
          fcli config var def rm ${SHA}_sastscan
          fcli sc-sast session logout --no-revoke-token
          fcli ssc session logout --no-revoke-token

      ### Archive ScanCentral Client logs on failure ###
      - name: Save ScanCentral Logs
        uses: actions/upload-artifact@v2                
        if: failure()
        with:
           name: scancentral-logs
           path: ~/.fortify/scancentral/log

        
